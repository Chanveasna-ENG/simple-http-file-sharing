"""
Django settings for file_sharing project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import socket
import winreg
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--k@vpl!cwuos(0n_r@7!_p@h0ew=rjd+reh=(us2_=txpb+m_2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost', 
    '127.0.0.1', 
    '192.168.1.16',  # Your specific IP
    '192.168.1.*',   # Allows all IPs in your local network subnet
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'files',  # Our custom app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'files.middleware.DeviceAuthMiddleware',
]

ROOT_URLCONF = 'file_sharing.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'file_sharing.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# import os

# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# # Absolute path to the shared folder
# SHARED_FOLDER = os.path.join(BASE_DIR, 'shared_folder')

# # Ensure the shared folder exists
# os.makedirs(SHARED_FOLDER, exist_ok=True)

# file_sharing/settings.py
# import os
# import socket
# import winreg

def get_downloads_folder():
    """
    Retrieve the Downloads folder path dynamically on Windows
    Works across different user accounts
    """
    try:
        # Try to get Downloads folder using Windows Registry
        key = winreg.OpenKey(
            winreg.HKEY_CURRENT_USER, 
            r'Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders'
        )
        downloads_path = winreg.QueryValueEx(key, '{374DE290-123F-4565-9164-39C4925E467B}')[0]
        winreg.CloseKey(key)
        
        # Create a 'Shared Folder' subdirectory if it doesn't exist
        shared_folder = os.path.join(downloads_path, 'Shared Folder')
        os.makedirs(shared_folder, exist_ok=True)
        
        return shared_folder
    except Exception as e:
        # Fallback to a default location if registry method fails
        print(f"Could not retrieve Downloads folder: {e}")
        fallback_path = os.path.join(os.path.expanduser('~'), 'Downloads', 'Shared Folder')
        os.makedirs(fallback_path, exist_ok=True)
        return fallback_path

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Dynamically get Shared Folder path
SHARED_FOLDER = get_downloads_folder()

# Dynamic allowed hosts
ALLOWED_HOSTS = [
    'localhost', 
    '127.0.0.1'
]

# Try to add local IP addresses
try:
    # Get local IP address
    local_ips = [
        socket.gethostbyname(socket.gethostname()),
        # Additional method to get local IP
        [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
    ]
    
    # Remove duplicates and add to ALLOWED_HOSTS
    for ip in set(local_ips):
        if ip not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(ip)
            ALLOWED_HOSTS.append(f'{ip}:10000')
except Exception as e:
    print(f"Could not automatically add IP addresses: {e}")
